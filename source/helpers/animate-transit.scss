// ANIMATE TRANSIT
// -----------------------------------------------------------------------------

@use "sass:list";
@use "sass:math";
@use "../settings" as *;

@function validate-effects($effects) {
  $effects-valid: ("fade", "slide");

  @each $effect in $effects {
    @if not (list.index($effects-valid, $effect)) {
      @error "Invalid transit animation effect name. Check spelling or review helper definition.";
    }
  }

  @return $effects;
}

@function validate-phases($phases) {
  $phases-valid: ("in", "out");

  @each $phase in $phases {
    @if not (list.index($phases-valid, $phase)) {
      @error "Invalid transit animation phase name. Check spelling or review helper definition.";
    }
  }

  @return $phases;
}

@function validate-translate-axis($translate-axis) {
  $translate-axes-valid: ("X", "Y");

  @if not (list.index($translate-axes-valid, $translate-axis)) {
    @error "Invalid translate axis name. Check spelling or review helper definition.";
  }

  @return $translate-axis;
}

@function validate-translate-length($translate-length) {
  $translate-units-valid: ("px", "em", "rem", "vw", "vh", "%");

  @if not (list.index($translate-units-valid,  math.unit($translate-length))) {
    @error "Invalid translate length unit. Check spelling or review helper definition.";
  }

  @return $translate-length;
}

@mixin animate-transit($item, $effects: ("fade", "slide"), $phases: ("in", "out"), $translate-axis: "Y", $translate-length: -1rem) {
  $effects: validate-effects($effects);
  $phases: validate-phases($phases);
  $translate-axis: validate-translate-axis($translate-axis);
  $translate-length: validate-translate-length($translate-length);

  $opacity-change: if(list.index($effects, "fade"), true, false);
  $opacity-start: 0;
  $opacity-end: 1;
  $transform-change: if(list.index($effects, "slide"), true, false);
  $transform-start: translate#{$translate-axis}(#{$translate-length});
  $transform-end: translate#{$translate-axis}(0);

  @each $phase in $phases {
    @if ($phase == "out") {
      $opacity-start: 1;
      $opacity-end: 0;
      $transform-start: translate#{$translate-axis}(0);
      $transform-end: translate#{$translate-axis}(#{$translate-length});
    }

    @keyframes #{$item}-transit-#{$phase} {
      0% {
        @if $opacity-change {
          opacity: $opacity-start;
        }
        @if $transform-change {
          transform: $transform-start;
        }
      }
      100% {
        @if $opacity-change {
          opacity: $opacity-end;
        }
        @if $transform-change {
          transform: $transform-end;
        }
      }
    }
  }
}
