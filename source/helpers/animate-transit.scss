// ANIMATE TRANSIT
// -----------------------------------------------------------------------------

@use "sass:list";
@use "../settings" as *;

@mixin animate-transit($item, $styles: ("fade", "slide"), $phases: ("in", "out"), $slide-origin: "top", $slide-size: 1rem) {
  @if ($styles != ("fade", "slide") and $styles != "fade" and $styles != "slide") {
    @error "Invalid transit animation style name. Check spelling or review helper definition.";
  } @else if ($phases != ("in", "out") and $phases != "in" and $phases != "out") {
    @error "Invalid transit animation phase name. Check spelling or review helper definition.";
  } @else if (not list.index(("top", "right", "bottom", "left"), $slide-origin)) {
    @error "Invalid transit animation slide origin name. Check spelling or review helper definition.";
  }

  $opacity-change: if(list.index($styles, "fade"), true, false);
  $opacity-start: 0;
  $opacity-end: 1;
  $translate-change: if(list.index($styles, "slide"), true, false);
  $translate-axis: if(($slide-origin == "left" or $slide-origin == "right"), "X", "Y");
  $translate-sign: if(($slide-origin == "right" or $slide-origin == "bottom"), "", "-");
  $translate-start: #{$translate-sign}#{$slide-size};
  $translate-end: 0;

  @each $phase in $phases {
    @if ($phase == "out") {
      @if $opacity-change {
        $opacity-start: 1;
        $opacity-end: 0;
      }
      @if $translate-change {
        $translate-start: 0;
        $translate-end: #{$translate-sign}#{$slide-size};
      }
    }

    @keyframes #{$item}-#{$phase} {
      0% {
        @if $opacity-change {
          opacity: $opacity-start;
        }
        @if $translate-change {
          transform: translate#{$translate-axis }(#{$translate-start});
        }
      }
      100% {
        @if $opacity-change {
          opacity: $opacity-end;
        }
        @if $translate-change {
          transform: translate#{$translate-axis }(#{$translate-end});
        }
      }
    }
  }
}
